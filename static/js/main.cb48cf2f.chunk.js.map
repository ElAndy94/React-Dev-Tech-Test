{"version":3,"sources":["assets/images/shape.svg","shared/utility.tsx","components/Vacancies/Vacancy/Vacancy.tsx","components/Vacancies/Vacancies.tsx","components/JobList/JobRole/JobItem.tsx","components/JobList/JobList.tsx","randomJobGenerator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","validate","title","location","department","salary","description","titleVal","length","locationVal","departmentVal","salaryVal","test","descriptionVal","vacancy","props","_useState","useState","_useState2","Object","slicedToArray","errors","setErrors","titleEl","useRef","locationEl","departmentEl","salaryEl","descriptionEl","react_default","a","createElement","className","onSubmit","event","preventDefault","current","value","updatedErrors","values","every","item","console","log","htmlFor","type","id","ref","placeholder","vacancies","Vacancy_Vacancy","jobItem","key","_id","desc","src","locationImg","jobList","input","setInput","jobs","jobTitle","i","Math","floor","random","toString","substring","JobRole","pickJobTitle","push","jobGenerator","filter","el","toLowerCase","indexOf","map","job","JobRole_JobItem","Fragment","onInput","e","currentTarget","App","Vacancies_Vacancies","JobList_JobList","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb48cf2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shape.32132be7.svg\";","const validate = (\n  title: string,\n  location: string,\n  department: string,\n  salary: string,\n  description: string\n) => {\n  const pattern = /^\\d+$/;\n  // true means invalid, so our conditions got reversed\n  return {\n    titleVal: title.length >= 5 && title.length <= 20,\n    locationVal: location.length >= 5 && location.length <= 20,\n    departmentVal: department.length >= 5 && department.length <= 20,\n    salaryVal: pattern.test(salary),\n    descriptionVal: description.length >= 50 && description.length <= 1000\n  };\n};\n\nexport default validate;\n","import React, { useRef, useState } from 'react';\n\nimport './Vacancy.scss';\nimport validate from '../../../shared/utility';\n\ninterface Props {}\n\nconst vacancy = (props: Props) => {\n  const [errors, setErrors] = useState({\n    titleVal: true,\n    locationVal: true,\n    departmentVal: true,\n    salaryVal: true,\n    descriptionVal: true\n  });\n\n  const titleEl = useRef<HTMLInputElement>(null);\n  const locationEl = useRef<HTMLInputElement>(null);\n  const departmentEl = useRef<HTMLInputElement>(null);\n  const salaryEl = useRef<HTMLInputElement>(null);\n  const descriptionEl = useRef<HTMLInputElement>(null);\n\n  const onSubmit = (event: any) => {\n    event.preventDefault();\n\n    const title = titleEl.current.value;\n    const location = locationEl.current.value;\n    const department = departmentEl.current.value;\n    const salary = salaryEl.current.value;\n    const description = descriptionEl.current.value;\n\n    let updatedErrors = validate(\n      title,\n      location,\n      department,\n      salary,\n      description\n    );\n    setErrors(updatedErrors);\n\n    let ifValidationPass = Object.values(errors).every(item => item === false);\n\n    if (ifValidationPass === true) {\n      console.log(title, location, department, salary);\n    }\n  };\n\n  return (\n    <form className='form' onSubmit={onSubmit}>\n      <div className='form-control'>\n        <label htmlFor='job-title'>Job Title*:</label>\n        <input\n          type='text'\n          className={!errors.titleVal ? 'error input-mod' : 'input-mod'}\n          id='job-title'\n          ref={titleEl}\n          placeholder='Job Title'\n        />\n      </div>\n      <div className='form-control'>\n        <label htmlFor='location'>Location*:</label>\n        <input\n          type='text'\n          className={!errors.locationVal ? 'error input-mod' : 'input-mod'}\n          id='location'\n          ref={locationEl}\n          placeholder='Manchester, United Kingdom'\n        />\n      </div>\n      <div className='form-control'>\n        <label htmlFor='department'>Department:</label>\n        <input\n          type='text'\n          className={!errors.departmentVal ? 'error input-mod' : 'input-mod'}\n          id='department'\n          ref={departmentEl}\n          placeholder='Development'\n        />\n      </div>\n      <div className='form-control'>\n        <label htmlFor='salary'>Salary*:</label>\n        <input\n          type='text'\n          className={!errors.salaryVal ? 'error input-mod' : 'input-mod'}\n          id='salary'\n          ref={salaryEl}\n          placeholder='25,000'\n        />\n      </div>\n      <div className='form-control'>\n        <label htmlFor='description'>Description*:</label>\n        <input\n          type='text'\n          className={!errors.descriptionVal ? 'error input-mod' : 'input-mod'}\n          id='description'\n          ref={descriptionEl}\n          placeholder='Explain the role and criteria here...'\n        />\n      </div>\n      <div className='form-actions'>\n        <button type='submit'>Post Job</button>\n      </div>\n    </form>\n  );\n};\n\nexport default vacancy;\n","import React from 'react';\n\nimport './Vacancies.scss';\nimport Vacancy from './Vacancy/Vacancy';\n\ninterface Props {}\n\nconst vacancies = (props: Props) => {\n  return (\n    <div className='vacancies'>\n      <h1>Vacancies</h1>\n      <p>\n        To get a feel for what it’s like to work for us then please visit Who We\n        Are or see what we’ve been up to within ITC News. <br /> Due to\n        continued growth, we currently have the following vacancy:\n      </p>\n      <Vacancy />\n    </div>\n  );\n};\n\nexport default vacancies;\n","import React from 'react';\n\nimport './JobItem.scss';\nimport locationImg from '../../../assets/images/shape.svg';\n\nconst jobItem = (props: any) => (\n  <li key={props._id} className='jobs__list'>\n    <div className='job__item'>\n      <h1>{props.title}</h1>\n      <p className='item--desc'>{props.desc}</p>\n      <div className='item--location'>\n        <img src={locationImg} className='locationImg' />\n        <h2>{props.location}</h2>\n      </div>\n      <p className='item--salary'>£ {props.salary} Annual Salary</p>\n      <div className='item-button'>\n        <button>More Info</button>\n      </div>\n    </div>\n  </li>\n);\n\nexport default jobItem;\n","import React, { useState } from 'react';\n\nimport JobItem from './JobRole/JobItem';\nimport jobGenerator from '../../randomJobGenerator';\nimport './JobList.scss';\n\ninterface Props {}\n\nconst jobList = (props: Props) => {\n  const [input, setInput] = useState('');\n\n  const jobs = jobGenerator()\n    .filter(el => {\n      return el.title.toLowerCase().indexOf(input.toLowerCase()) !== -1;\n    })\n    .map(job => {\n      return (\n        <JobItem\n          key={job._id}\n          title={job.title}\n          location={job.location}\n          salary={job.salary}\n          desc={job.desc}\n        />\n      );\n    });\n\n  return (\n    <React.Fragment>\n      <input\n        className='searchBar'\n        value={input}\n        onInput={e => setInput(e.currentTarget.value)}\n      />\n\n      <ul className='jobs__list'>{jobs}</ul>\n    </React.Fragment>\n  );\n};\n\nexport default jobList;\n","export interface Job {\n  _id: string;\n  title: string;\n  location: string;\n  salary: string;\n  desc: string;\n}\n\nexport default () => {\n  let jobs: Job[] = [];\n  let jobTitle: String[] = [\n    'Front-End Developer',\n    'Back-End Developer',\n    'Dev',\n    'UI Designer',\n    'Scrum Master',\n    'Lead Developer',\n    'Lead Front-End Developer'\n  ];\n\n  for (let i = 0; i < Math.floor(Math.random() * 10 + 5); i++) {\n    const id =\n      Math.random()\n        .toString(36)\n        .substring(2, 15) +\n      Math.random()\n        .toString(36)\n        .substring(2, 15);\n    id.toString();\n\n    const pickJobTitle = (jobTitle: String[]) => {\n      let theJobTitle = jobTitle[Math.floor(Math.random() * jobTitle.length)];\n      return theJobTitle.toString();\n    };\n\n    let salary = Math.floor(Math.random() * 70000 + 16000).toString();\n    let jobName = pickJobTitle(jobTitle);\n    let jobDesc =\n      'Sony laptops are among the most well known laptops on today’s market. Sony is a name that over time has established itself as creating a solid product with a stellar reputation. In addition to all the good press that Sony has, Sony is known for making the best ‘small’ laptops.';\n    let location = 'Manchester, United Kingdom';\n\n    let JobRole = {\n      _id: id,\n      title: jobName,\n      location: location,\n      salary: salary,\n      desc: jobDesc\n    };\n\n    jobs.push(JobRole);\n  }\n  return jobs;\n};\n","import React from 'react';\n\nimport './App.scss';\nimport Vacancies from './components/Vacancies/Vacancies';\nimport JobList from './components/JobList/JobList';\n\ninterface Props {}\n\nconst App = (props: Props) => {\n  return (\n    <div className='App'>\n      <Vacancies />\n      <JobList />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}